version: '3.8'

services:
  pds:
    image: ghcr.io/bluesky-social/pds:0.4
    container_name: resonance_pds
    restart: unless-stopped
    environment:
      # Domain configuration
      PDS_HOSTNAME: sync.terasync.app
      PDS_DATA_DIRECTORY: /pds
      PDS_BLOBSTORE_DISK_LOCATION: /pds/blocks
      PDS_DID_PLC_URL: https://plc.directory
      PDS_BSKY_APP_VIEW_URL: https://api.bsky.app
      PDS_BSKY_APP_VIEW_DID: did:web:api.bsky.app
      PDS_REPORT_SERVICE_URL: https://mod.bsky.app
      PDS_REPORT_SERVICE_DID: did:plc:ar7c4by46qjdydhdevvrndac
      PDS_CRAWLERS: https://bsky.network
      
      # Database configuration
      PDS_DB_POSTGRES_URL: postgresql://pds:pds_password_2025@postgres:5432/pds
      
      # Admin configuration
      PDS_ADMIN_PASSWORD: ${PDS_ADMIN_PASSWORD}
      
      # JWT secrets
      PDS_JWT_SECRET: ${PDS_JWT_SECRET}
      
      # Rate limiting and features
      PDS_RATE_LIMITS_ENABLED: "true"
      PDS_INVITE_REQUIRED: "false"
      PDS_USER_DOMAIN: sync.terasync.app
      
      # Logging
      LOG_ENABLED: "true"
      NODE_ENV: production
      
    ports:
      - "3000:3000"
    volumes:
      - pds_data:/pds
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pds_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: resonance_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: pds
      POSTGRES_USER: pds
      POSTGRES_PASSWORD: pds_password_2025
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - pds_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pds -d pds"]
      interval: 10s
      timeout: 5s
      retries: 5

  caddy:
    image: caddy:2-alpine
    container_name: resonance_caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - pds_network
    depends_on:
      - pds

volumes:
  pds_data:
  postgres_data:
  caddy_data:
  caddy_config:

networks:
  pds_network:
    driver: bridge